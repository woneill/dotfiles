#!/usr/bin/env bash

# script/setup: Set up application for the first time after cloning, or set it
#               back to the initial first unused state.

on_err() {
    local parent_lineno="$1"
    local message="$2"
    local code="${3:-1}"
    if [[ -n "$message" ]] ; then
        echo "Error on or near line ${parent_lineno}: ${message}; exiting with status ${code}"
    else
        echo "Error on or near line ${parent_lineno}; exiting with status ${code}"
    fi
    exit "${code}"
}

cd "$(dirname "$0")/.." || exit

script/bootstrap

stow -R bash bitbar ctags direnv git homebrew puppet python ruby screen travisci vagrant vim

if [ "$(uname -s)" = "Darwin" ]; then
    stow -R osx

    if [ -f "${HOME}/.Brewfile" ]; then
        brew update
        brew bundle check --global >/dev/null 2>&1  || {
            echo "==> Installing Global Homebrew dependencies…"
            brew bundle -v --global
        }
    fi

    if [ -f /Applications/Docker.app/Contents/Resources/etc ]; then
        echo "==> Installing Docker bash completion…"
        stow -R -t "$(brew --prefix)/etc/bash_completion.d" -d /Applications/Docker.app/Contents/Resources etc
    fi

    cellar=$(brew --cellar)
    # Link brewed python versions into pyenv
    echo "==> Linking python versions into pyenv…"
    pyenv_dest="${PYENV_ROOT:-/usr/local/var/pyenv}"
    mkdir -p "${pyenv_dest}"/{plugins,versions}
    if [ -f "${pyenv_dest}/plugins/pyenv-register" ]; then
        echo "==> Installing pyenv register plugin..."
        git clone https://github.com/doloopwhile/pyenv-register.git "${pyenv_dest}"/plugins/pyenv-register
    fi
    for python_binary in $(brew --cellar)/python*/*/bin/python[2,3]; do
        pyenv register --force "$python_binary"
    done

    # Link brewed ruby versions into rbenv
    echo "==> Linking ruby versions into rbenv…"
    rbenv_dest="${RBENV_ROOT:-/usr/local/var/rbenv}"
    mkdir -p "${rbenv_dest}/versions"
    stow -R -t "${rbenv_dest}/versions" -d "$cellar" ruby
fi

if [ ! -d ~/.vim/bundle/Vundle.vim ]; then
    echo "==> Installing vim bundles…"
    mkdir -p ~/.vim/bundle
    git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim
    vim +PluginInstall +qall
fi

npm list -g jsonlint &> /dev/null
rc=$?
if [[ $rc != 0 ]]; then
    echo "==> Installing jsonlint…"
    npm install -g jsonlint
fi

npm list -g js-yaml &> /dev/null
rc=$?
if [[ $rc != 0 ]]; then
    echo "==> Installing js-yaml…"
    npm install -g js-yaml
fi

[ -x script/setup.work."$(uname -s)" ] && script/setup.work."$(uname -s)"

echo "==> Ready to go!"
